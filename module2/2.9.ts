// ЁЯСЙ ржжрзБржЯрж┐ рж╕рж╛ржзрж╛рж░ржг ржЯрж╛ржЗржк ржбрзЗржлрж┐ржирзЗрж╢ржи
type a1 = number;
type b1 = string;

// ЁЯСЙ Conditional type: a1 ржХрж┐ null ржЯрж╛ржЗржк ржХрж┐ржирж╛ рждрж╛ ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
type x = a1 extends null ? true : false;
// ржлрж▓рж╛ржлрж▓ рж╣ржмрзЗ false, ржХрж╛рж░ржг number ржХржЦржиржЗ null ржирж╛

// ЁЯСЙ Nested conditional type:
type y = a1 extends null ? true : b1 extends undefined ? undefined : any;
// ржПржЦрж╛ржирзЗ ржкрзНрж░ржержо ржЪрзЗржХ: a1 extends null тАФ тЭМ
// рждрж╛рж░ржкрж░ ржжрзНржмрж┐рждрзАрзЯ ржЪрзЗржХ: b1 extends undefined тАФ тЭМ
// ржлрж▓рзЗ final рж░рзЗржЬрж╛рж▓рзНржЯ рж╣ржмрзЗ: `any`

// ЁЯСЙ ржПржХржЯрж┐ ржЕржмржЬрзЗржХрзНржЯ ржЯрж╛ржЗржк ржпрзЗржЦрж╛ржирзЗ ржмрж┐ржнрж┐ржирзНржи ржмрж╛рж╣ржи ржЖржЫрзЗ
type Sheikh = {
  bike: string;
  car: string;
  ship: string;
  plane: string;
};

// ЁЯСЙ keyof Sheikh = 'bike' | 'car' | 'ship' | 'plane'

// тЬЕ ржПржЦржи ржЖржорж░рж╛ ржЪрзЗржХ ржХрж░ржмрзЛ ржжрзЗржУрзЯрж╛ ржХрзЛржи key Sheikh ржЕржмржЬрзЗржХрзНржЯрзЗ ржЖржЫрзЗ ржХрж┐ ржирж╛
type CheckVehicle<T> = T extends keyof Sheikh ? true : false;

// ЁЯСЙ ржПржЦрж╛ржирзЗ 'bike' ржЖржЫрзЗ Sheikh ржПрж░ key ржЧрзБрж▓рзЛрж░ ржоржзрзНржпрзЗ, рждрж╛ржЗ true
type Hasbike = CheckVehicle<'bike'>; // тЬЕ true

// ЁЯСЙ ржЙржжрж╛рж╣рж░ржг: ржирж┐ржЪрзЗрж░ ржЧрзБрж▓рзЛрж░ ржлрж▓рж╛ржлрж▓ ржХрзЗржоржи рж╣ржмрзЗ?
type HasTruck = CheckVehicle<'truck'>; // тЭМ false (ржХрж╛рж░ржг 'truck' ржирзЗржЗ)
type HasShip = CheckVehicle<'ship'>; // тЬЕ true
type HasPlane = CheckVehicle<'plane'>; // тЬЕ true
