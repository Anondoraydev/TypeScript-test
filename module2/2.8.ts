// ЁЯСЙ ржПржХржЯрж┐ ржЯрж╛ржЗржк ржбрж┐ржлрж╛ржЗржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ Todo ржбрзЗржЯрж╛рж░ ржЬржирзНржп
type Todo = {
  id: number;
  userId: number;
  completed: boolean;
};

// ЁЯСЙ ржПржХржЯрж┐ ржЕрзНржпрж╛рж╕рж┐ржиржХрзНрж░рзЛржирж╛рж╕ ржлрж╛ржВрж╢ржи ржпрзЗржЯрж┐ ржПржХржЯрж┐ API ржерзЗржХрзЗ Todo ржбрзЗржЯрж╛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ
const getTodo = async (): Promise<Todo> => {
  const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');
  const data = await response.json(); // JSON ржбрзЗржЯрж╛ рж╣рж┐рж╕рзЗржмрзЗ рж░рзЗрж╕ржкржирзНрж╕ржХрзЗ ржХржиржнрж╛рж░рзНржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
  return data; // ржПржЗ data ржЯрж╛ржЗржк рж╣ржмрзЗ Todo
};

getTodo(); // ржлрж╛ржВрж╢ржи ржХрж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ

// ЁЯСЙ ржЖрж░рзЗржХржЯрж┐ ржХрж╛рж╕рзНржЯржо ржЯрж╛ржЗржк
type someThing = { someThing: string };

// ЁЯСЙ ржирж┐ржЬрзЗ ржирж┐ржЬрзЗ ржПржХржЯрж┐ Promise рждрзИрж░рж┐ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ржпрзЗржЯрж┐ someThing ржЯрж╛ржЗржкрзЗрж░ ржбрзЗржЯрж╛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ
const createPromise = (): Promise<someThing> => {
  return new Promise<someThing>((resolve, reject) => {
    const data: someThing = { someThing: 'someThing' };
    if (data) {
      resolve(data); // рж╕ржлрж▓ рж╣рж▓рзЗ resolve ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
    } else {
      reject('Failed to load data'); // ржмрзНржпрж░рзНрже рж╣рж▓рзЗ error ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
    }
  });
};

// ЁЯСЙ Promise-ржЯрж┐ async/await ржжрж┐рзЯрзЗ рж╣рзНржпрж╛ржирзНржбрж▓ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
const showData = async () => {
  const data: someThing = await createPromise(); // createPromise() ржерзЗржХрзЗ data ржкрж╛ржУрзЯрж╛ ржпрж╛ржЪрзНржЫрзЗ
  return data;
};

showData(); // ржлрж╛ржВрж╢ржи ржХрж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ
